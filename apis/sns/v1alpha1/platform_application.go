/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	runtimev1alpha1 "github.com/crossplane/crossplane-runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// PlatformApplicationParameters defines the desired state of PlatformApplication
type PlatformApplicationParameters struct {
	Attributes map[string]*string `json:"attributes,omitempty"`
	Name *string `json:"name,omitempty"`
	Platform *string `json:"platform,omitempty"`
}

// PlatformApplicationSpec defines the desired state of PlatformApplication
type PlatformApplicationSpec struct {
	runtimev1alpha1.ResourceSpec `json:",inline"`
	ForProvider PlatformApplicationParameters `json:"forProvider"`
}

// PlatformApplicationObservation defines the observed state of PlatformApplication
type PlatformApplicationObservation struct {
}

// PlatformApplicationStatus defines the observed state of PlatformApplication.
type PlatformApplicationStatus struct {
	runtimev1alpha1.ResourceStatus `json:",inline"`
	AtProvider PlatformApplicationObservation `json:"atProvider"`
}


// +kubebuilder:object:root=true

// PlatformApplication is the Schema for the PlatformApplications API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type PlatformApplication struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec   PlatformApplicationSpec   `json:"spec,omitempty"`
	Status PlatformApplicationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PlatformApplicationList contains a list of PlatformApplications
type PlatformApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items []PlatformApplication `json:"items"`
}

// Repository type metadata.
var (
	PlatformApplicationKind             = "PlatformApplication"
	PlatformApplicationGroupKind        = schema.GroupKind{Group: Group, Kind: PlatformApplicationKind}.String()
	PlatformApplicationKindAPIVersion   = PlatformApplicationKind + "." + GroupVersion.String()
	PlatformApplicationGroupVersionKind = GroupVersion.WithKind(PlatformApplicationKind)
)

func init() {
	SchemeBuilder.Register(&PlatformApplication{}, &PlatformApplicationList{})
}

