/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	runtimev1alpha1 "github.com/crossplane/crossplane-runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// PlatformEndpointParameters defines the desired state of PlatformEndpoint
type PlatformEndpointParameters struct {
	Attributes map[string]*string `json:"attributes,omitempty"`
	CustomUserData *string `json:"customUserData,omitempty"`
	PlatformApplicationARN *string `json:"platformApplicationARN,omitempty"`
	Token *string `json:"token,omitempty"`
}

// PlatformEndpointSpec defines the desired state of PlatformEndpoint
type PlatformEndpointSpec struct {
	runtimev1alpha1.ResourceSpec `json:",inline"`
	ForProvider PlatformEndpointParameters `json:"forProvider"`
}

// PlatformEndpointObservation defines the observed state of PlatformEndpoint
type PlatformEndpointObservation struct {
	EndpointARN *string `json:"endpointARN,omitempty"`
}

// PlatformEndpointStatus defines the observed state of PlatformEndpoint.
type PlatformEndpointStatus struct {
	runtimev1alpha1.ResourceStatus `json:",inline"`
	AtProvider PlatformEndpointObservation `json:"atProvider"`
}


// +kubebuilder:object:root=true

// PlatformEndpoint is the Schema for the PlatformEndpoints API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type PlatformEndpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec   PlatformEndpointSpec   `json:"spec,omitempty"`
	Status PlatformEndpointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PlatformEndpointList contains a list of PlatformEndpoints
type PlatformEndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items []PlatformEndpoint `json:"items"`
}

// Repository type metadata.
var (
	PlatformEndpointKind             = "PlatformEndpoint"
	PlatformEndpointGroupKind        = schema.GroupKind{Group: Group, Kind: PlatformEndpointKind}.String()
	PlatformEndpointKindAPIVersion   = PlatformEndpointKind + "." + GroupVersion.String()
	PlatformEndpointGroupVersionKind = GroupVersion.WithKind(PlatformEndpointKind)
)

func init() {
	SchemeBuilder.Register(&PlatformEndpoint{}, &PlatformEndpointList{})
}

