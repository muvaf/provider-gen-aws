/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	runtimev1alpha1 "github.com/crossplane/crossplane-runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// TopicParameters defines the desired state of Topic
type TopicParameters struct {
	Attributes map[string]*string `json:"attributes,omitempty"`
	Name *string `json:"name,omitempty"`
	Tags []*Tag `json:"tags,omitempty"`
}

// TopicSpec defines the desired state of Topic
type TopicSpec struct {
	runtimev1alpha1.ResourceSpec `json:",inline"`
	ForProvider TopicParameters `json:"forProvider"`
}

// TopicObservation defines the observed state of Topic
type TopicObservation struct {
}

// TopicStatus defines the observed state of Topic.
type TopicStatus struct {
	runtimev1alpha1.ResourceStatus `json:",inline"`
	AtProvider TopicObservation `json:"atProvider"`
}


// +kubebuilder:object:root=true

// Topic is the Schema for the Topics API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Topic struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec   TopicSpec   `json:"spec,omitempty"`
	Status TopicStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TopicList contains a list of Topics
type TopicList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items []Topic `json:"items"`
}

// Repository type metadata.
var (
	TopicKind             = "Topic"
	TopicGroupKind        = schema.GroupKind{Group: Group, Kind: TopicKind}.String()
	TopicKindAPIVersion   = TopicKind + "." + GroupVersion.String()
	TopicGroupVersionKind = GroupVersion.WithKind(TopicKind)
)

func init() {
	SchemeBuilder.Register(&Topic{}, &TopicList{})
}

